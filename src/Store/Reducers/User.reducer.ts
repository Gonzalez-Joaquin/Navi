import { createSlice, PayloadAction } from '@reduxjs/toolkit'

import { UserDTO } from '../../@Types'

interface UserState {
  list: Array<UserDTO>
  logedUser?: UserDTO
  loading: boolean
  error?: string
}

const initialState: UserState = {
  list: [
    {
      id: '1',
      name: 'Juan Pérez',
      email: 'juan.perez@example.com',
      password: 'hashedpassword1',
      securityCode: '123456',
      role: '0',
      lastAccess: new Date('2024-08-21T10:15:00Z').getTime(),
      timestamp: new Date('2024-01-15T08:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/men/1.jpg',
    },
    {
      id: '2',
      name: 'María García',
      email: 'maria.garcia@example.com',
      password: 'hashedpassword2',
      securityCode: '654321',
      role: '2',
      lastAccess: new Date('2024-08-20T09:30:00Z').getTime(),
      timestamp: new Date('2023-11-10T12:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/2.jpg',
    },
    {
      id: '3',
      name: 'Pedro Martínez',
      email: 'pedro.martinez@example.com',
      password: 'hashedpassword3',
      securityCode: 'abcdef',
      role: '1',
      lastAccess: new Date('2024-08-19T14:45:00Z').getTime(),
      timestamp: new Date('2024-03-25T10:30:00Z').getTime(),
      isActive: false,
      pic: 'https://randomuser.me/api/portraits/men/3.jpg',
    },
    {
      id: '4',
      name: 'Ana López',
      email: 'ana.lopez@example.com',
      password: 'hashedpassword4',
      securityCode: '123abc',
      role: '3',
      lastAccess: new Date('2024-08-18T11:00:00Z').getTime(),
      timestamp: new Date('2023-09-12T16:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/4.jpg',
    },
    {
      id: '5',
      name: 'Carlos Fernández',
      email: 'carlos.fernandez@example.com',
      password: 'hashedpassword5',
      securityCode: '987654',
      role: '0',
      lastAccess: new Date('2024-08-17T17:30:00Z').getTime(),
      timestamp: new Date('2024-04-20T09:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/men/5.jpg',
    },
    {
      id: '6',
      name: 'Laura Martínez',
      email: 'laura.martinez@example.com',
      password: 'hashedpassword6',
      securityCode: '456def',
      role: '2',
      lastAccess: new Date('2024-08-16T15:00:00Z').getTime(),
      timestamp: new Date('2024-05-05T13:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/6.jpg',
    },
    {
      id: '7',
      name: 'Jorge López',
      email: 'jorge.lopez@example.com',
      password: 'hashedpassword7',
      securityCode: '789ghi',
      role: '1',
      lastAccess: new Date('2024-08-15T14:30:00Z').getTime(),
      timestamp: new Date('2024-02-18T11:00:00Z').getTime(),
      isActive: false,
      pic: 'https://randomuser.me/api/portraits/men/7.jpg',
    },
    {
      id: '8',
      name: 'Sofia Gómez',
      email: 'sofia.gomez@example.com',
      password: 'hashedpassword8',
      securityCode: '012jkl',
      role: '3',
      lastAccess: new Date('2024-08-14T13:00:00Z').getTime(),
      timestamp: new Date('2024-07-01T15:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/8.jpg',
    },
    {
      id: '9',
      name: 'Daniel Ramírez',
      email: 'daniel.ramirez@example.com',
      password: 'hashedpassword9',
      securityCode: '345mno',
      role: '0',
      lastAccess: new Date('2024-08-13T12:30:00Z').getTime(),
      timestamp: new Date('2023-10-10T10:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/men/9.jpg',
    },
    {
      id: '10',
      name: 'Isabella Cruz',
      email: 'isabella.cruz@example.com',
      password: 'hashedpassword10',
      securityCode: '678pqr',
      role: '2',
      lastAccess: new Date('2024-08-12T11:00:00Z').getTime(),
      timestamp: new Date('2024-06-20T09:30:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/10.jpg',
    },
    {
      id: '11',
      name: 'Luis Hernández',
      email: 'luis.hernandez@example.com',
      password: 'hashedpassword11',
      securityCode: '901stu',
      role: '1',
      lastAccess: new Date('2024-08-11T10:00:00Z').getTime(),
      timestamp: new Date('2024-01-05T08:00:00Z').getTime(),
      isActive: false,
      pic: 'https://randomuser.me/api/portraits/men/11.jpg',
    },
    {
      id: '12',
      name: 'Valeria Torres',
      email: 'valeria.torres@example.com',
      password: 'hashedpassword12',
      securityCode: '234vwx',
      role: '3',
      lastAccess: new Date('2024-08-10T09:30:00Z').getTime(),
      timestamp: new Date('2024-03-10T13:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/12.jpg',
    },
    {
      id: '13',
      name: 'Ricardo Moreno',
      email: 'ricardo.moreno@example.com',
      password: 'hashedpassword13',
      securityCode: '567yza',
      role: '0',
      lastAccess: new Date('2024-08-09T14:15:00Z').getTime(),
      timestamp: new Date('2024-02-01T11:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/men/13.jpg',
    },
    {
      id: '14',
      name: 'Natalia Delgado',
      email: 'natalia.delgado@example.com',
      password: 'hashedpassword14',
      securityCode: '890bcd',
      role: '2',
      lastAccess: new Date('2024-08-08T13:00:00Z').getTime(),
      timestamp: new Date('2024-06-15T10:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/14.jpg',
    },
    {
      id: '15',
      name: 'Fernando Vargas',
      email: 'fernando.vargas@example.com',
      password: 'hashedpassword15',
      securityCode: '123efg',
      role: '1',
      lastAccess: new Date('2024-08-07T12:30:00Z').getTime(),
      timestamp: new Date('2024-05-20T09:00:00Z').getTime(),
      isActive: false,
      pic: 'https://randomuser.me/api/portraits/men/15.jpg',
    },
    {
      id: '16',
      name: 'Camila Ríos',
      email: 'camila.rios@example.com',
      password: 'hashedpassword16',
      securityCode: '456hij',
      role: '3',
      lastAccess: new Date('2024-08-06T11:15:00Z').getTime(),
      timestamp: new Date('2024-07-10T12:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/16.jpg',
    },
    {
      id: '17',
      name: 'Joaquín Méndez',
      email: 'joaquin.mendez@example.com',
      password: 'hashedpassword17',
      securityCode: '789abc',
      role: '0',
      lastAccess: new Date('2024-08-05T10:00:00Z').getTime(),
      timestamp: new Date('2024-01-20T08:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/men/17.jpg',
    },
    {
      id: '18',
      name: 'Gabriela Ruiz',
      email: 'gabriela.ruiz@example.com',
      password: 'hashedpassword18',
      securityCode: '012def',
      role: '2',
      lastAccess: new Date('2024-08-04T11:30:00Z').getTime(),
      timestamp: new Date('2023-12-15T09:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/18.jpg',
    },
    {
      id: '19',
      name: 'Ricardo Álvarez',
      email: 'ricardo.alvarez@example.com',
      password: 'hashedpassword19',
      securityCode: '345ghi',
      role: '1',
      lastAccess: new Date('2024-08-03T12:45:00Z').getTime(),
      timestamp: new Date('2024-02-10T14:00:00Z').getTime(),
      isActive: false,
      pic: 'https://randomuser.me/api/portraits/men/19.jpg',
    },
    {
      id: '20',
      name: 'Mariana Morales',
      email: 'mariana.morales@example.com',
      password: 'hashedpassword20',
      securityCode: '678jkl',
      role: '3',
      lastAccess: new Date('2024-08-02T13:30:00Z').getTime(),
      timestamp: new Date('2024-04-05T10:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/20.jpg',
    },
    {
      id: '21',
      name: 'Luis Soto',
      email: 'luis.soto@example.com',
      password: 'hashedpassword21',
      securityCode: '901mno',
      role: '0',
      lastAccess: new Date('2024-08-01T14:00:00Z').getTime(),
      timestamp: new Date('2024-06-25T09:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/men/21.jpg',
    },
    {
      id: '22',
      name: 'Laura Peña',
      email: 'laura.pena@example.com',
      password: 'hashedpassword22',
      securityCode: '234pqr',
      role: '2',
      lastAccess: new Date('2024-07-31T10:00:00Z').getTime(),
      timestamp: new Date('2024-03-30T08:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/22.jpg',
    },
    {
      id: '23',
      name: 'Alejandro Fernández',
      email: 'alejandro.fernandez@example.com',
      password: 'hashedpassword23',
      securityCode: '567stu',
      role: '1',
      lastAccess: new Date('2024-07-30T09:45:00Z').getTime(),
      timestamp: new Date('2024-05-15T10:00:00Z').getTime(),
      isActive: false,
      pic: 'https://randomuser.me/api/portraits/men/23.jpg',
    },
    {
      id: '24',
      name: 'Beatriz González',
      email: 'beatriz.gonzalez@example.com',
      password: 'hashedpassword24',
      securityCode: '890uvw',
      role: '3',
      lastAccess: new Date('2024-07-29T11:15:00Z').getTime(),
      timestamp: new Date('2024-07-01T09:00:00Z').getTime(),
      isActive: true,
      pic: 'https://randomuser.me/api/portraits/women/24.jpg',
    },
  ],
  loading: false,
  error: undefined,
}

const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    setUsers: (state, action: PayloadAction<Array<UserDTO>>) => {
      state.list = action.payload
    },
    setSelectedUser: (state, action: PayloadAction<string>) => {
      state.logedUser = state.list.find(user => user.id === action.payload)
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload
    },
  },
})

export const { setUsers, setSelectedUser, setLoading, setError } = userSlice.actions
export default userSlice.reducer
